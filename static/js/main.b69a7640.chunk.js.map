{"version":3,"sources":["assets/images/defaultDog.jpg","components/formComponent/LabelComponent.js","components/infoDog/InfoDog.js","components/auxButtons/AuxButtons.js","components/formComponent/SelectComponent.js","components/formComponent/InputComponent.js","components/formComponent/ButtonSubmit.js","components/dogApi/DogApi.js","components/app/App.js","serviceWorker.js","index.js"],"names":["module","exports","LabelComponent","props","style","this","value","Component","InfoDog","state","params","dateParams","getDate","slice","getMonth","getFullYear","hoursParams","getHours","getMinutes","insertionDate","Date","dateTime","formattedDate","getFormattedDate","formattedHour","getgetFormattedHours","className","registered","fontStyle","nameDog","breedSelected","src","imgDogSelected","alt","AuxButtons","reloadPage","window","location","reload","deleteLocalStorage","localStorage","clear","onClick","SelectComponent","onChange","required","option","InputComponent","placeholder","ButtonSubmit","type","DogApi","handleSubmit","e","preventDefault","setState","key","setItem","JSON","stringify","onShowAlert","error","color","text","alertOptions","visibleAlert","setTimeout","listDogAPI","ImageDefaultDog","undefined","fontFamily","listColorFonts","listFonts","objectTest","Object","parse","getItem","console","log","getDogApiLIst","bind","handleChangeBreed","handleChangeFontFamily","handleChangeFontColor","handleChangeNameDog","dogSelected","url_image","fetch","then","res","json","message","catch","event","getImgDogApi","target","options","listFontsSelect","map","data","push","forEach","element","Alert","isOpen","Container","Form","onSubmit","Row","App","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b69a7640.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/defaultDog.319bc19d.jpg\";","import React, { Component } from 'react';\r\n\r\nclass LabelComponent extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n    render() {\r\n        return (\r\n            <label style={this.props.style}>{this.props.value}</label>\r\n        )\r\n    }\r\n}\r\n\r\nexport default LabelComponent;","import React, { Component } from 'react';\r\nimport LabelComponent from '../formComponent/LabelComponent';\r\n\r\nclass InfoDog extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = props.params;\r\n    }\r\n\r\n\r\n    //pega a data atual para adiciona na insercao do usuario\r\n    getFormattedDate(dateParams) {\r\n        let day = (\"00\" + dateParams.getDate()).slice(-2);\r\n        let month = (\"00\" + (dateParams.getMonth() + 1)).slice(-2);\r\n        let year = (\"0000\" + dateParams.getFullYear()).slice(-4);\r\n        return day + '/' + month + '/' + year;\r\n    }\r\n\r\n    //pega a data atual para adiciona na insercao do usuario\r\n    getgetFormattedHours(hoursParams) {\r\n        let hours = (\"00\" + hoursParams.getHours()).slice(-2);\r\n        let minutes = (\"00\" + hoursParams.getMinutes()).slice(-2);\r\n        return hours + ':' + minutes;\r\n    }\r\n\r\n\r\n    render() {\r\n        let insertionDate = new Date(this.props.params.dateTime),\r\n            formattedDate = this.getFormattedDate(insertionDate),\r\n            formattedHour = this.getgetFormattedHours(insertionDate);\r\n\r\n\r\n        return (\r\n            <div className=\"div-img-label\" >\r\n                {/* AQUI ELE SÓ PERMITE MOSTRAR O ELEMENTO SE ESTIVER REGISTRADO */}\r\n                {this.props.params.registered ?\r\n                    <div className=\"label-name\">\r\n                        <LabelComponent style={this.props.params.fontStyle} value={`Nome: ${this.props.params.nameDog}`}/>\r\n                        <LabelComponent style={this.props.params.fontStyle} value={`Raça: ${this.props.params.breedSelected}`}/>\r\n                        <LabelComponent style={this.props.params.fontStyle} value={`Hora: ${formattedHour}`}/>\r\n                        <LabelComponent style={this.props.params.fontStyle} value={`Data: ${formattedDate}`}/>\r\n                    </div>\r\n                    : null}\r\n                <img className=\"dog-img\" src={this.props.params.imgDogSelected} alt=\"A cool dog\" />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default InfoDog;","import React, { Component } from 'react';\r\nimport \"./AuxButtons.css\";\r\n\r\nclass AuxButtons extends Component {\r\n\r\n    //usado para recarregar pagina\r\n    reloadPage = () => {\r\n        window.location.reload()\r\n    };\r\n\r\n    //usado para limpar o localStorage\r\n    deleteLocalStorage = () => {\r\n        localStorage.clear(); \r\n        window.location.reload();\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"buttons-config\">\r\n                <button className=\"btn btn-secondary ml-1 mt-1 col-12\" onClick={() => { this.reloadPage() }}>Reload Page</button>\r\n                <button className=\"btn btn-secondary ml-1 mt-1 col-12\" onClick={() => { this.deleteLocalStorage() }}>Delete Local Storage</button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default AuxButtons;","import React, { Component } from 'react';\r\nimport './FormComponent.css'\r\n\r\nclass SelectComponent extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n    render() {\r\n        return (\r\n            <select className=\"select custom-select\" value={this.props.value} onChange={this.props.onChange} required>\r\n                {this.props.option}\r\n            </select>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SelectComponent;","import React, { Component } from 'react';\r\nimport './FormComponent.css'\r\n\r\nclass InputComponent extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n    render() {\r\n        return (\r\n            <input\r\n                className=\"input-name form-control\"\r\n                value={this.props.value}\r\n                onChange={this.props.onChange}\r\n                placeholder=\"Digite o nome do cachorro\"\r\n                required>\r\n            </input>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default InputComponent;","import React, { Component } from 'react';\r\nimport './FormComponent.css'\r\n\r\nclass ButtonSubmit extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n    render() {\r\n        return (\r\n            <button type=\"submit\" className=\"button-save btn btn-info\">{this.props.value}</button>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ButtonSubmit;","import React, { Component } from \"react\";\r\nimport { Alert, Container, Row, Form } from 'reactstrap';\r\nimport ImageDefaultDog from \"../../assets/images/defaultDog.jpg\";\r\nimport InfoDog from \"../infoDog/InfoDog\";\r\nimport \"./DogApi.css\";\r\nimport AuxButtons from \"../auxButtons/AuxButtons\";\r\nimport SelectComponent from \"../formComponent/SelectComponent\";\r\nimport InputComponent from \"../formComponent/InputComponent\";\r\nimport ButtonSubmit from \"../formComponent/ButtonSubmit\";\r\n\r\nclass DogApi extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      listDogAPI: [],\r\n      nameDog: \"\",\r\n      imgDogSelected: ImageDefaultDog,\r\n      alertOptions: {\r\n        visibleAlert: false,\r\n        text: '',\r\n        color: 'info',\r\n      },\r\n      breedSelected: 'defaultValue',\r\n      dateTime: Date(),\r\n      registered: undefined,\r\n      fontStyle: {\r\n        color: \"defaultValue\",\r\n        fontFamily: \"defaultValue\",\r\n      },\r\n      listColorFonts: ['Blue', 'Red', 'Purple', \"Green\", 'Black'],\r\n      listFonts: ['Acme', 'Anton', 'Josefin Sans', \"Notable\", 'Roboto']\r\n    };\r\n\r\n    // esse for carregara todos o elementos salvos no local storage\r\n    let objectTest = new Object();\r\n    for (const key in this.state) {\r\n      objectTest[key] = JSON.parse(localStorage.getItem(`@challenge-enext/${key}`));\r\n    };\r\n\r\n    //validação para verificar se o existe algum registro no local storage, se existir, seta o state com as informações\r\n    (localStorage.getItem(`@challenge-enext/registered`)) ? this.state = objectTest : console.log('Registro Limpo');\r\n\r\n    //O bind resolve um problema causado pelo contexto do JavaScript, ele provê uma maneira de garantir que mesmo desacoplando \r\n    //uma função de um objeto o comportamento dele continue o mesmo, garantindo assim uma integridade do comportamento da função. \r\n    this.getDogApiLIst = this.getDogApiLIst.bind(this);\r\n    this.handleChangeBreed = this.handleChangeBreed.bind(this);\r\n    this.handleChangeFontFamily = this.handleChangeFontFamily.bind(this);\r\n    this.handleChangeFontColor = this.handleChangeFontColor.bind(this);\r\n    this.handleChangeNameDog = this.handleChangeNameDog.bind(this);\r\n  }\r\n\r\n  //É invocado imediatamente após um componente ser montado\r\n  componentDidMount() {\r\n    this.getDogApiLIst();//chama a funcao para carregar o select com as raças\r\n  }\r\n\r\n  //Recebe a a imagem randomica da raça do cachorro selecionado\r\n  getImgDogApi(dogSelected) {\r\n    if (dogSelected) {\r\n\r\n      let url_image = `https://dog.ceo/api/breed/${dogSelected}/images/random`;\r\n      fetch(url_image).then(res => { return res.json(); })\r\n        .then(json => {\r\n          this.setState({ imgDogSelected: json.message }); //seta a image retornada no state\r\n        }).catch(error => { this.onShowAlert('danger', `Erro: ${error}`); });\r\n    }\r\n  }\r\n\r\n  //Recebe a lista de raças da api\r\n  getDogApiLIst() {\r\n    let url_coversor = `https://dog.ceo/api/breeds/list/all`;\r\n    fetch(url_coversor).then(res => { return res.json(); })\r\n      .then(json => {\r\n        let listDogAPI = [json.message];\r\n        this.setState({ listDogAPI });\r\n      }).catch(error => { this.onShowAlert('danger', `Erro: ${error}`); });\r\n  }\r\n\r\n  //Seta no state a raça selecionada\r\n  handleChangeBreed(event) {\r\n    this.getImgDogApi(event.target.value);\r\n    this.setState({ breedSelected: event.target.value })\r\n  }\r\n\r\n  //Seta no state a fontFamily selecionada\r\n  handleChangeFontFamily(event) {\r\n    this.setState({ fontStyle: { fontFamily: event.target.value, color: this.state.fontStyle.color } })\r\n  }\r\n\r\n  //Seta no state a cor da font selecionada\r\n  handleChangeFontColor(event) {\r\n    this.setState({ fontStyle: { fontFamily: this.state.fontStyle.fontFamily, color: event.target.value } })\r\n  }\r\n\r\n  //Seta no state a cor da font selecionada\r\n  handleChangeNameDog(event) {\r\n    this.setState({ nameDog: event.target.value })\r\n  }\r\n\r\n  //salva as informacoes no local storage\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();// Prevent submit from reloading the page\r\n    try {\r\n      //salvando a data/hora do insercao no local storage.. OBS: passando o callback para garantir que o setState seja realiza primeiro.\r\n      this.setState({ dateTime: new Date(), registered: true, nameDog: this.state.nameDog }, () => {\r\n        for (const key in this.state) {\r\n          localStorage.setItem(`@challenge-enext/${key}`, JSON.stringify(this.state[key]));\r\n        }\r\n        this.onShowAlert('success', 'Registrado com sucesso!');\r\n      });\r\n    } catch (error) { this.onShowAlert('danger', `Erro: ${error}`) };\r\n  }\r\n\r\n  //Mostrta o alert de sucesso durante 2seg, depois seta aos valores default\r\n  onShowAlert = (color, text) => {\r\n    this.setState({ alertOptions: { visibleAlert: true, text, color } }, () => {\r\n      window.setTimeout(() => {\r\n        this.setState({ alertOptions: { visibleAlert: false, text: '', color: 'info' } })\r\n      }, 2000)\r\n    });\r\n  }\r\n\r\n\r\n  //\r\n  //RENDER REACT\r\n  //\r\n  render() {\r\n    let options = [],\r\n      listFontsSelect = [],\r\n      listColorFonts = [];\r\n\r\n    //Preenche o select com as racas dos cachorros da API\r\n    this.state.listDogAPI.map(((data) => {\r\n      options.push(<option key='defaultValue' value=''>Selecione uma raça</option>)\r\n      // options.push(<option key='defaultValue' value='defaultValue' disabled>Selecione uma raça</option>)\r\n      for (const key in data) {\r\n        options.push(<option key={key} value={key}>{key}</option>)\r\n      }\r\n      return options;\r\n    }))\r\n\r\n    //Preenche o select com as fonts \r\n    listFontsSelect.push(<option key='defaultValue' value=''>Selecione uma fonte de texto</option>)\r\n    this.state.listFonts.forEach(element => {\r\n      listFontsSelect.push(<option key={element} value={element}>{element}</option>)\r\n    });\r\n\r\n    //Preenche o select com as cores de fonts \r\n    listColorFonts.push(<option key='defaultValue' value=''>Selecione uma cor para o texto</option>)\r\n    this.state.listColorFonts.forEach(element => {\r\n      listColorFonts.push(<option key={element} value={element}>{element}</option>)\r\n    });\r\n\r\n    return (//retorno do \"html\" para apresentar no App.js\r\n\r\n      <div>\r\n        <AuxButtons /> {/* Botoes auxiliares para recarregar pagina e apagar localstorage */}\r\n\r\n        <Alert className=\"alert\" color={this.state.alertOptions.color} isOpen={this.state.alertOptions.visibleAlert}>\r\n          {this.state.alertOptions.text}\r\n        </Alert> {/* Component para exibir a mensagem de alert sucesso ou falha */}\r\n\r\n        <Container>\r\n          <InfoDog params={this.state} /> {/* Component que tras as imagem e as informações salvas no localstorage */}\r\n\r\n          <Form onSubmit={(e) => { this.handleSubmit(e) }}> {/* Form com os insputs para novo registro */}\r\n            <Row>{/* Select raça */}\r\n              <SelectComponent value={this.state.breedSelected} onChange={this.handleChangeBreed} option={options} />\r\n            </Row>\r\n            <Row>{/* Input nome dog  */}\r\n              <InputComponent value={this.state.nameDog} onChange={this.handleChangeNameDog} />\r\n            </Row>\r\n            <Row>{/* Select fonte  */}\r\n              <SelectComponent value={this.state.fontStyle.fontFamily} onChange={this.handleChangeFontFamily} option={listFontsSelect} />\r\n            </Row>\r\n            <Row>{/* Select cor */}\r\n              <SelectComponent value={this.state.fontStyle.color} onChange={this.handleChangeFontColor} option={listColorFonts} />\r\n            </Row>\r\n            <Row>\r\n              <ButtonSubmit value=\"Salvar\" />\r\n            </Row>\r\n          </Form>\r\n        </Container>\r\n      </div >\r\n    );\r\n  }\r\n}\r\n\r\nexport default DogApi;\r\n\r\n","import React from 'react';\r\nimport './App.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport DogApi from \"../dogApi/DogApi\"\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <DogApi />\r\n      </header>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/app/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}