{"version":3,"sources":["assets/images/defaultDog.jpg","components/formComponent/LabelComponent.js","components/infoDog/InfoDog.js","components/auxButtons/AuxButtons.js","components/formComponent/SelectComponent.js","components/formComponent/InputComponent.js","components/formComponent/ButtonSubmit.js","components/dogApi/DogApi.js","components/app/App.js","serviceWorker.js","index.js"],"names":["module","exports","LabelComponent","style","this","props","value","Component","InfoDog","state","params","dateParams","getDate","slice","getMonth","getFullYear","hoursParams","getHours","getMinutes","insertionDate","Date","dateTime","formattedDate","getFormattedDate","formattedHour","getgetFormattedHours","className","registered","fontStyle","nameDog","breedSelected","src","imgDogSelected","alt","AuxButtons","reloadPage","window","location","reload","deleteLocalStorage","localStorage","clear","onClick","SelectComponent","listDogAPI","listColorFonts","listFonts","getDogApiLIst","fetch","then","res","json","message","setState","catch","error","onShowAlert","listBreeds","map","data","key","push","listFontsSelect","forEach","element","event","getImgDogApi","target","fontFamily","color","val","onChange","change","required","option","getOptionsListBreeds","getOptionsListFonts","getOptionsListColorFonts","InputComponent","placeholder","ButtonSubmit","type","DogApi","handleSubmit","e","preventDefault","setItem","JSON","stringify","text","alertOptions","visibleAlert","setTimeout","ImageDefaultDog","undefined","objectTest","parse","getItem","console","log","handleChangeBreed","bind","handleChangeFontFamily","handleChangeFontColor","handleChangeNameDog","dogSelected","url_image","Alert","isOpen","Container","Form","onSubmit","Row","App","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iIAAAA,EAAOC,QAAU,IAA0B,wC,yUCU5BC,E,iLANP,OACI,2BAAOC,MAAOC,KAAKC,MAAMF,OAAQC,KAAKC,MAAMC,W,GAH3BC,aC6CdC,G,kBA1CX,WAAYH,GAAQ,IAAD,8BACf,4CAAMA,KACDI,MAAQJ,EAAMK,OAFJ,E,8EAMFC,GAIb,OAHW,KAAOA,EAAWC,WAAWC,OAAO,GAGlC,KAFA,MAAQF,EAAWG,WAAa,IAAID,OAAO,GAE7B,KADf,OAASF,EAAWI,eAAeF,OAAO,K,2CAKrCG,GAGjB,OAFa,KAAOA,EAAYC,YAAYJ,OAAO,GAEpC,KADA,KAAOG,EAAYE,cAAcL,OAAO,K,+BAKvD,IAAIM,EAAgB,IAAIC,KAAKhB,KAAKC,MAAMK,OAAOW,UAC3CC,EAAgBlB,KAAKmB,iBAAiBJ,GACtCK,EAAgBpB,KAAKqB,qBAAqBN,GAE9C,OACI,yBAAKO,UAAU,iBAEVtB,KAAKC,MAAMK,OAAOiB,WACf,yBAAKD,UAAU,cACX,kBAAC,EAAD,CAAgBvB,MAAOC,KAAKC,MAAMK,OAAOkB,UAAWtB,MAAK,gBAAWF,KAAKC,MAAMK,OAAOmB,WACtF,kBAAC,EAAD,CAAgB1B,MAAOC,KAAKC,MAAMK,OAAOkB,UAAWtB,MAAK,mBAAWF,KAAKC,MAAMK,OAAOoB,iBACtF,kBAAC,EAAD,CAAgB3B,MAAOC,KAAKC,MAAMK,OAAOkB,UAAWtB,MAAK,gBAAWkB,KACpE,kBAAC,EAAD,CAAgBrB,MAAOC,KAAKC,MAAMK,OAAOkB,UAAWtB,MAAK,gBAAWgB,MAEtE,KACN,yBAAKI,UAAU,UAAUK,IAAK3B,KAAKC,MAAMK,OAAOsB,eAAgBC,IAAI,oB,GArC9D1B,cCuBP2B,G,uNArBXC,WAAa,WACTC,OAAOC,SAASC,U,EAIpBC,mBAAqB,WACjBC,aAAaC,QACbL,OAAOC,SAASC,U,wEAGV,IAAD,OACL,OACI,yBAAKZ,UAAU,kBACX,4BAAQA,UAAU,qCAAqCgB,QAAS,WAAQ,EAAKP,eAA7E,eACA,4BAAQT,UAAU,qCAAqCgB,QAAS,WAAQ,EAAKH,uBAA7E,6B,GAjBShC,cCuFVoC,G,kBAtFX,WAAYtC,GAAQ,IAAD,8BACf,4CAAMA,KACDI,MAAQ,CACTmC,WAAY,GACZC,eAAgB,CAAC,OAAQ,MAAO,SAAU,QAAS,SACnDC,UAAW,CAAC,OAAQ,QAAS,eAAgB,UAAW,WAL7C,E,iFAWf1C,KAAK2C,kB,sCAIQ,IAAD,OAEZC,MADgB,uCACIC,MAAK,SAAAC,GAAS,OAAOA,EAAIC,UACxCF,MAAK,SAAAE,GACF,IAAIP,EAAa,CAACO,EAAKC,SACvB,EAAKC,SAAS,CAAET,kBACjBU,OAAM,SAAAC,GAAW,EAAKC,YAAY,SAAjB,gBAAoCD,S,6CAK5D,IAAIE,EAAa,GAQjB,OAPArD,KAAKK,MAAMmC,WAAWc,KAAK,SAACC,GAExB,IAAK,IAAMC,KADXH,EAAWI,KAAK,4BAAQD,IAAI,eAAetD,MAAM,IAAjC,0BACEqD,EACdF,EAAWI,KAAK,4BAAQD,IAAKA,EAAKtD,MAAOsD,GAAMA,IAEnD,OAAOH,KAEJA,I,4CAKP,IAAIK,EAAkB,GAKtB,OAJAA,EAAgBD,KAAK,4BAAQD,IAAI,eAAetD,MAAM,IAAjC,iCACrBF,KAAKK,MAAMqC,UAAUiB,SAAQ,SAAAC,GACzBF,EAAgBD,KAAK,4BAAQD,IAAKI,EAAS1D,MAAO0D,GAAUA,OAEzDF,I,iDAKP,IAAIjB,EAAiB,GAKrB,OAJAA,EAAegB,KAAK,4BAAQD,IAAI,eAAetD,MAAM,IAAjC,mCACpBF,KAAKK,MAAMoC,eAAekB,SAAQ,SAAAC,GAC9BnB,EAAegB,KAAK,4BAAQD,IAAKI,EAAS1D,MAAO0D,GAAUA,OAExDnB,I,wCAKOoB,GACd7D,KAAK8D,aAAaD,EAAME,OAAO7D,OAC/BF,KAAKiD,SAAS,CAAEvB,cAAemC,EAAME,OAAO7D,U,6CAIzB2D,GACnB7D,KAAKiD,SAAS,CAAEzB,UAAW,CAAEwC,WAAYH,EAAME,OAAO7D,MAAO+D,MAAOjE,KAAKK,MAAMmB,UAAUyC,W,4CAIvEJ,GAClB7D,KAAKiD,SAAS,CAAEzB,UAAW,CAAEwC,WAAYhE,KAAKK,MAAMmB,UAAUwC,WAAYC,MAAOJ,EAAME,OAAO7D,W,+BAI9F,OACI,4BAAQoB,UAAU,uBAAuBpB,MAAOF,KAAKC,MAAMiE,IAAKC,SAAUnE,KAAKC,MAAMmE,OAAQC,UAAQ,GAC1E,WAAtBrE,KAAKC,MAAMqE,OAAsBtE,KAAKuE,uBAAyB,KACzC,UAAtBvE,KAAKC,MAAMqE,OAAqBtE,KAAKwE,sBAAwB,KACvC,WAAtBxE,KAAKC,MAAMqE,OAAsBtE,KAAKyE,2BAA6B,U,GAhFtDtE,cCefuE,E,iLAbP,OACI,2BACIpD,UAAU,0BACVpB,MAAOF,KAAKC,MAAMiE,IAClBC,SAAUnE,KAAKC,MAAMmE,OACrBO,YAAY,4BACZN,UAAQ,Q,GARKlE,aCQdyE,E,iLANP,OACI,4BAAQC,KAAK,SAASvD,UAAU,4BAA4BtB,KAAKC,MAAMC,W,GAHxDC,aCoJZ2E,E,YA5Ib,WAAY7E,GAAQ,IAAD,uBACjB,4CAAMA,KAoER8E,aAAe,SAACC,GACdA,EAAEC,iBACF,IAEE,EAAKhC,SAAS,CAAEhC,SAAU,IAAID,KAAQO,YAAY,EAAME,QAAS,EAAKpB,MAAMoB,UAAW,WACrF,IAAK,IAAM+B,KAAO,EAAKnD,MACrB+B,aAAa8C,QAAb,2BAAyC1B,GAAO2B,KAAKC,UAAU,EAAK/E,MAAMmD,KAE5E,EAAKJ,YAAY,UAAW,8BAE9B,MAAOD,GAAS,EAAKC,YAAY,SAAjB,gBAAoCD,MA/ErC,EAmFnBC,YAAc,SAACa,EAAOoB,GACpB,EAAKpC,SAAS,CAAEqC,aAAc,CAAEC,cAAc,EAAMF,OAAMpB,WAAW,WACnEjC,OAAOwD,YAAW,WAChB,EAAKvC,SAAS,CAAEqC,aAAc,CAAEC,cAAc,EAAOF,KAAM,GAAIpB,MAAO,YACrE,SArFL,EAAK5D,MAAQ,CACXoB,QAAS,GACTG,eAAgB6D,IAChBH,aAAc,CACZC,cAAc,EACdF,KAAM,GACNpB,MAAO,QAETvC,cAAe,eACfT,SAAUD,OACVO,gBAAYmE,EACZlE,UAAW,CACTyC,MAAO,eACPD,WAAY,iBAKhB,IAAI2B,EAAa,GACjB,IAAK,IAAMnC,KAAO,EAAKnD,MACrBsF,EAAWnC,GAAO2B,KAAKS,MAAMxD,aAAayD,QAAb,2BAAyCrC,KAtBvD,OA0BhBpB,aAAayD,QAAb,+BAAuD,EAAKxF,MAAQsF,EAAaG,QAAQC,IAAI,kBAI9F,EAAKC,kBAAoB,EAAKA,kBAAkBC,KAAvB,gBACzB,EAAKC,uBAAyB,EAAKA,uBAAuBD,KAA5B,gBAC9B,EAAKE,sBAAwB,EAAKA,sBAAsBF,KAA3B,gBAC7B,EAAKG,oBAAsB,EAAKA,oBAAoBH,KAAzB,gBAjCV,E,0EAqCNI,GAAc,IAAD,OACxB,GAAIA,EAAa,CACf,IAAIC,EAAS,oCAAgCD,EAAhC,kBACbzD,MAAM0D,GAAWzD,MAAK,SAAAC,GAAS,OAAOA,EAAIC,UACvCF,MAAK,SAAAE,GACJ,EAAKE,SAAS,CAAErB,eAAgBmB,EAAKC,aACpCE,OAAM,SAAAC,GAAW,EAAKC,YAAY,SAAjB,gBAAoCD,U,wCAK5CU,GAChB7D,KAAK8D,aAAaD,EAAME,OAAO7D,OAC/BF,KAAKiD,SAAS,CAAEvB,cAAemC,EAAME,OAAO7D,U,6CAIvB2D,GACrB7D,KAAKiD,SAAS,CAAEzB,UAAW,CAAEwC,WAAYH,EAAME,OAAO7D,MAAO+D,MAAOjE,KAAKK,MAAMmB,UAAUyC,W,4CAIrEJ,GACpB7D,KAAKiD,SAAS,CAAEzB,UAAW,CAAEwC,WAAYhE,KAAKK,MAAMmB,UAAUwC,WAAYC,MAAOJ,EAAME,OAAO7D,W,0CAI5E2D,GAClB7D,KAAKiD,SAAS,CAAExB,QAASoC,EAAME,OAAO7D,U,iDA4BtC,IAAIuC,EAAiB,GAKrB,OAJAA,EAAegB,KAAK,4BAAQD,IAAI,eAAetD,MAAM,IAAjC,mCACpBF,KAAKK,MAAMoC,eAAekB,SAAQ,SAAAC,GAChCnB,EAAegB,KAAK,4BAAQD,IAAKI,EAAS1D,MAAO0D,GAAUA,OAEtDnB,I,+BAMC,IAAD,OAEP,OACE,6BACE,kBAAC,EAAD,MADF,IAGE,kBAAC8D,EAAA,EAAD,CAAOjF,UAAU,QAAQ2C,MAAOjE,KAAKK,MAAMiF,aAAarB,MAAOuC,OAAQxG,KAAKK,MAAMiF,aAAaC,cAC5FvF,KAAKK,MAAMiF,aAAaD,MAJ7B,IAOE,kBAACoB,EAAA,EAAD,KACE,kBAAC,EAAD,CAASnG,OAAQN,KAAKK,QADxB,IAGE,kBAACqG,EAAA,EAAD,CAAMC,SAAU,SAAC3B,GAAQ,EAAKD,aAAaC,KAA3C,IACE,kBAAC4B,EAAA,EAAD,KACE,kBAAC,EAAD,CAAiB1C,IAAKlE,KAAKK,MAAMqB,cAAe0C,OAAQpE,KAAKgG,kBAAmB1B,OAAQ,SAAUhE,OAAQN,KAAKK,SAEjH,kBAACuG,EAAA,EAAD,KACE,kBAAC,EAAD,CAAgB1C,IAAKlE,KAAKK,MAAMoB,QAAS2C,OAAQpE,KAAKoG,uBAExD,kBAACQ,EAAA,EAAD,KACE,kBAAC,EAAD,CAAiB1C,IAAKlE,KAAKK,MAAMmB,UAAUwC,WAAYI,OAAQpE,KAAKkG,uBAAwB5B,OAAQ,QAAShE,OAAQN,KAAKK,SAE5H,kBAACuG,EAAA,EAAD,KACE,kBAAC,EAAD,CAAiB1C,IAAKlE,KAAKK,MAAMmB,UAAUyC,MAAOG,OAAQpE,KAAKmG,sBAAuB7B,OAAQ,SAAUhE,OAAQN,KAAKK,SAEvH,kBAACuG,EAAA,EAAD,KACE,kBAAC,EAAD,CAAc1G,MAAM,mB,GApIbC,aCMN0G,MAXf,WACE,OACE,yBAAKvF,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,EAAD,SCGYwF,QACW,cAA7B9E,OAAOC,SAAS8E,UAEe,UAA7B/E,OAAOC,SAAS8E,UAEhB/E,OAAOC,SAAS8E,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1E,MAAK,SAAA2E,GACjCA,EAAaC,kB","file":"static/js/main.3c1f6641.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/defaultDog.319bc19d.jpg\";","import React, { Component } from 'react';\r\n\r\nclass LabelComponent extends Component {\r\n    render() {\r\n        return (\r\n            <label style={this.props.style}>{this.props.value}</label>\r\n        )\r\n    }\r\n}\r\n\r\nexport default LabelComponent;","import React, { Component } from 'react';\r\nimport LabelComponent from '../formComponent/LabelComponent';\r\nimport './InfoDog.css';\r\n\r\nclass InfoDog extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = props.params;\r\n    }\r\n\r\n    //pega a data atual para adiciona na insercao do usuario\r\n    getFormattedDate(dateParams) {\r\n        let day = (\"00\" + dateParams.getDate()).slice(-2);\r\n        let month = (\"00\" + (dateParams.getMonth() + 1)).slice(-2);\r\n        let year = (\"0000\" + dateParams.getFullYear()).slice(-4);\r\n        return day + '/' + month + '/' + year;\r\n    }\r\n\r\n    //pega a data atual para adiciona na insercao do usuario\r\n    getgetFormattedHours(hoursParams) {\r\n        let hours = (\"00\" + hoursParams.getHours()).slice(-2);\r\n        let minutes = (\"00\" + hoursParams.getMinutes()).slice(-2);\r\n        return hours + ':' + minutes;\r\n    }\r\n\r\n    render() {\r\n        let insertionDate = new Date(this.props.params.dateTime),\r\n            formattedDate = this.getFormattedDate(insertionDate),\r\n            formattedHour = this.getgetFormattedHours(insertionDate);\r\n\r\n        return (\r\n            <div className=\"div-img-label\" >\r\n                {/* AQUI ELE SÓ PERMITE MOSTRAR O ELEMENTO SE ESTIVER REGISTRADO */}\r\n                {this.props.params.registered ?\r\n                    <div className=\"label-name\">\r\n                        <LabelComponent style={this.props.params.fontStyle} value={`Nome: ${this.props.params.nameDog}`}/>\r\n                        <LabelComponent style={this.props.params.fontStyle} value={`Raça: ${this.props.params.breedSelected}`}/>\r\n                        <LabelComponent style={this.props.params.fontStyle} value={`Hora: ${formattedHour}`}/>\r\n                        <LabelComponent style={this.props.params.fontStyle} value={`Data: ${formattedDate}`}/>\r\n                    </div>\r\n                    : null}\r\n                <img className=\"dog-img\" src={this.props.params.imgDogSelected} alt=\"A cool dog\" />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default InfoDog;","import React, { Component } from 'react';\r\nimport \"./AuxButtons.css\";\r\n\r\nclass AuxButtons extends Component {\r\n\r\n    //usado para recarregar pagina\r\n    reloadPage = () => {\r\n        window.location.reload()\r\n    };\r\n\r\n    //usado para limpar o localStorage\r\n    deleteLocalStorage = () => {\r\n        localStorage.clear(); \r\n        window.location.reload();\r\n    };\r\n\r\n    render() {\r\n        return ( //COMPONETES CRIADOS PARA AUXILIAR NO CARREGAMENTO DA PAGINA E PARA APAGAR O LOCAL STORAGE\r\n            <div className=\"buttons-config\">\r\n                <button className=\"btn btn-secondary ml-1 mt-1 col-12\" onClick={() => { this.reloadPage() }}>Reload Page</button>\r\n                <button className=\"btn btn-secondary ml-1 mt-1 col-12\" onClick={() => { this.deleteLocalStorage() }}>Delete Local Storage</button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default AuxButtons;","import React, { Component } from 'react';\r\nimport './FormComponent.css'\r\n\r\nclass SelectComponent extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            listDogAPI: [],\r\n            listColorFonts: ['Blue', 'Red', 'Purple', \"Green\", 'Black'],\r\n            listFonts: ['Acme', 'Anton', 'Josefin Sans', \"Notable\", 'Roboto']\r\n        };\r\n    }\r\n\r\n    //É invocado imediatamente após um componente ser montado\r\n    componentDidMount() {\r\n        this.getDogApiLIst();//chama a funcao para carregar o select com as raças\r\n    }\r\n\r\n    //Recebe a lista de raças da api\r\n    getDogApiLIst() {\r\n        let url_coversor = `https://dog.ceo/api/breeds/list/all`;\r\n        fetch(url_coversor).then(res => { return res.json(); })\r\n            .then(json => {\r\n                let listDogAPI = [json.message];\r\n                this.setState({ listDogAPI });\r\n            }).catch(error => { this.onShowAlert('danger', `Erro: ${error}`); });\r\n    }\r\n\r\n    //Preenche o select com as racas dos cachorros da API\r\n    getOptionsListBreeds() {\r\n        let listBreeds = [];\r\n        this.state.listDogAPI.map(((data) => {\r\n            listBreeds.push(<option key='defaultValue' value=''>Selecione uma raça</option>)\r\n            for (const key in data) {\r\n                listBreeds.push(<option key={key} value={key}>{key}</option>)\r\n            }\r\n            return listBreeds;\r\n        }))\r\n        return listBreeds;\r\n    };\r\n\r\n    //Preenche o select com as fonts \r\n    getOptionsListFonts() {\r\n        let listFontsSelect = [];\r\n        listFontsSelect.push(<option key='defaultValue' value=''>Selecione uma fonte de texto</option>)\r\n        this.state.listFonts.forEach(element => {\r\n            listFontsSelect.push(<option key={element} value={element}>{element}</option>)\r\n        });\r\n        return listFontsSelect;\r\n    };\r\n\r\n    //Preenche o select com as cores de fonts \r\n    getOptionsListColorFonts() {\r\n        let listColorFonts = [];\r\n        listColorFonts.push(<option key='defaultValue' value=''>Selecione uma cor para o texto</option>)\r\n        this.state.listColorFonts.forEach(element => {\r\n            listColorFonts.push(<option key={element} value={element}>{element}</option>)\r\n        });\r\n        return listColorFonts;\r\n    };\r\n\r\n\r\n    //Seta no state a raça selecionada\r\n    handleChangeBreed(event) {\r\n        this.getImgDogApi(event.target.value);\r\n        this.setState({ breedSelected: event.target.value })\r\n    }\r\n\r\n    //Seta no state a fontFamily selecionada\r\n    handleChangeFontFamily(event) {\r\n        this.setState({ fontStyle: { fontFamily: event.target.value, color: this.state.fontStyle.color } })\r\n    }\r\n\r\n    //Seta no state a cor da font selecionada\r\n    handleChangeFontColor(event) {\r\n        this.setState({ fontStyle: { fontFamily: this.state.fontStyle.fontFamily, color: event.target.value } })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <select className=\"select custom-select\" value={this.props.val} onChange={this.props.change} required>\r\n                {this.props.option === \"breeds\" ? this.getOptionsListBreeds() : null}\r\n                {this.props.option === \"fonts\" ? this.getOptionsListFonts() : null}\r\n                {this.props.option === \"colors\" ? this.getOptionsListColorFonts() : null}\r\n\r\n            </select>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SelectComponent;","import React, { Component } from 'react';\r\nimport './FormComponent.css'\r\n\r\nclass InputComponent extends Component {\r\n    render() {\r\n        return (\r\n            <input\r\n                className=\"input-name form-control\"\r\n                value={this.props.val}\r\n                onChange={this.props.change}\r\n                placeholder=\"Digite o nome do cachorro\"\r\n                required>\r\n            </input>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default InputComponent;","import React, { Component } from 'react';\r\nimport './FormComponent.css'\r\n\r\nclass ButtonSubmit extends Component {\r\n    render() {\r\n        return (\r\n            <button type=\"submit\" className=\"button-save btn btn-info\">{this.props.value}</button>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ButtonSubmit;","import React, { Component } from \"react\";\r\nimport { Alert, Container, Row, Form } from 'reactstrap';\r\nimport ImageDefaultDog from \"../../assets/images/defaultDog.jpg\";\r\nimport InfoDog from \"../infoDog/InfoDog\";\r\nimport \"./DogApi.css\";\r\nimport AuxButtons from \"../auxButtons/AuxButtons\";\r\nimport SelectComponent from \"../formComponent/SelectComponent\";\r\nimport InputComponent from \"../formComponent/InputComponent\";\r\nimport ButtonSubmit from \"../formComponent/ButtonSubmit\";\r\n\r\nclass DogApi extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      nameDog: \"\",\r\n      imgDogSelected: ImageDefaultDog,\r\n      alertOptions: {\r\n        visibleAlert: false,\r\n        text: '',\r\n        color: 'info',\r\n      },\r\n      breedSelected: 'defaultValue',\r\n      dateTime: Date(),\r\n      registered: undefined,\r\n      fontStyle: {\r\n        color: \"defaultValue\",\r\n        fontFamily: \"defaultValue\",\r\n      }\r\n    };\r\n\r\n    // esse for carregara todos o elementos salvos no local storage\r\n    let objectTest = {};\r\n    for (const key in this.state) {\r\n      objectTest[key] = JSON.parse(localStorage.getItem(`@challenge-enext/${key}`));\r\n    };\r\n\r\n    //validação para verificar se o existe algum registro no local storage, se existir, seta o state com as informações\r\n    (localStorage.getItem(`@challenge-enext/registered`)) ? this.state = objectTest : console.log('Registro Limpo');\r\n\r\n    //O bind resolve um problema causado pelo contexto do JavaScript, ele provê uma maneira de garantir que mesmo desacoplando \r\n    //uma função de um objeto o comportamento dele continue o mesmo, garantindo assim uma integridade do comportamento da função. \r\n    this.handleChangeBreed = this.handleChangeBreed.bind(this);\r\n    this.handleChangeFontFamily = this.handleChangeFontFamily.bind(this);\r\n    this.handleChangeFontColor = this.handleChangeFontColor.bind(this);\r\n    this.handleChangeNameDog = this.handleChangeNameDog.bind(this);\r\n  }\r\n\r\n  //Recebe a a imagem randomica da raça do cachorro selecionado\r\n  getImgDogApi(dogSelected) {\r\n    if (dogSelected) {\r\n      let url_image = `https://dog.ceo/api/breed/${dogSelected}/images/random`;\r\n      fetch(url_image).then(res => { return res.json(); })\r\n        .then(json => {\r\n          this.setState({ imgDogSelected: json.message }); //seta a image retornada no state\r\n        }).catch(error => { this.onShowAlert('danger', `Erro: ${error}`); });\r\n    }\r\n  }\r\n\r\n  //Seta no state a raça selecionada\r\n  handleChangeBreed(event) {\r\n    this.getImgDogApi(event.target.value);\r\n    this.setState({ breedSelected: event.target.value })\r\n  }\r\n\r\n  //Seta no state a fontFamily selecionada\r\n  handleChangeFontFamily(event) {\r\n    this.setState({ fontStyle: { fontFamily: event.target.value, color: this.state.fontStyle.color } })\r\n  }\r\n\r\n  //Seta no state a cor da font selecionada\r\n  handleChangeFontColor(event) {\r\n    this.setState({ fontStyle: { fontFamily: this.state.fontStyle.fontFamily, color: event.target.value } })\r\n  }\r\n\r\n  //Seta no state a cor da font selecionada\r\n  handleChangeNameDog(event) {\r\n    this.setState({ nameDog: event.target.value })\r\n  }\r\n\r\n  //salva as informacoes no local storage\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();// Prevent submit from reloading the page\r\n    try {\r\n      //salvando a data/hora do insercao no local storage.. OBS: passando o callback para garantir que o setState seja realiza primeiro.\r\n      this.setState({ dateTime: new Date(), registered: true, nameDog: this.state.nameDog }, () => {\r\n        for (const key in this.state) {\r\n          localStorage.setItem(`@challenge-enext/${key}`, JSON.stringify(this.state[key]));\r\n        }\r\n        this.onShowAlert('success', 'Registrado com sucesso!');\r\n      });\r\n    } catch (error) { this.onShowAlert('danger', `Erro: ${error}`) };\r\n  }\r\n\r\n  //Mostrta o alert de sucesso durante 2seg, depois seta aos valores default\r\n  onShowAlert = (color, text) => {\r\n    this.setState({ alertOptions: { visibleAlert: true, text, color } }, () => {\r\n      window.setTimeout(() => {\r\n        this.setState({ alertOptions: { visibleAlert: false, text: '', color: 'info' } })\r\n      }, 2000)\r\n    });\r\n  }\r\n\r\n  //Preenche o select com as cores de fonts \r\n  getOptionsListColorFonts() {\r\n    let listColorFonts = [];\r\n    listColorFonts.push(<option key='defaultValue' value=''>Selecione uma cor para o texto</option>)\r\n    this.state.listColorFonts.forEach(element => {\r\n      listColorFonts.push(<option key={element} value={element}>{element}</option>)\r\n    });\r\n    return listColorFonts;\r\n  };\r\n\r\n  //\r\n  //RENDER REACT\r\n  //\r\n  render() {\r\n\r\n    return (//retorno do \"html\" para apresentar no App.js\r\n      <div>\r\n        <AuxButtons /> {/* Botoes auxiliares para recarregar pagina e apagar localstorage */}\r\n\r\n        <Alert className=\"alert\" color={this.state.alertOptions.color} isOpen={this.state.alertOptions.visibleAlert}>\r\n          {this.state.alertOptions.text}\r\n        </Alert> {/* Component para exibir a mensagem de alert sucesso ou falha */}\r\n\r\n        <Container>\r\n          <InfoDog params={this.state} /> {/* Component que tras as imagem e as informações salvas no localstorage */}\r\n\r\n          <Form onSubmit={(e) => { this.handleSubmit(e) }}> {/* Form com os insputs para novo registro */}\r\n            <Row>{/* Select raça */}\r\n              <SelectComponent val={this.state.breedSelected} change={this.handleChangeBreed} option={'breeds'} params={this.state} />\r\n            </Row>\r\n            <Row>{/* Input nome dog  */}\r\n              <InputComponent val={this.state.nameDog} change={this.handleChangeNameDog} />\r\n            </Row>\r\n            <Row>{/* Select fonte  */}\r\n              <SelectComponent val={this.state.fontStyle.fontFamily} change={this.handleChangeFontFamily} option={'fonts'} params={this.state} />\r\n            </Row>\r\n            <Row>{/* Select cor */}\r\n              <SelectComponent val={this.state.fontStyle.color} change={this.handleChangeFontColor} option={'colors'} params={this.state} />\r\n            </Row>\r\n            <Row>\r\n              <ButtonSubmit value=\"Salvar\" />\r\n            </Row>\r\n          </Form>\r\n        </Container>\r\n      </div >\r\n    );\r\n  }\r\n}\r\n\r\nexport default DogApi;\r\n\r\n","import React from 'react';\r\nimport './App.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport DogApi from \"../dogApi/DogApi\"\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <DogApi />\r\n      </header>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/app/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}