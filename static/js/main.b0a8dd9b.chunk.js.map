{"version":3,"sources":["assets/images/defaultDog.jpg","components/dogApi/DogApi.js","components/app/App.js","serviceWorker.js","index.js"],"names":["module","exports","DogApi","props","handleSubmit","e","preventDefault","setState","dateTime","Date","registered","nameDog","state","key","localStorage","setItem","JSON","stringify","onShowAlert","error","color","text","alertOptions","visibleAlert","window","setTimeout","reloadPage","location","reload","deleteLocalStorage","clear","listDogAPI","imgDogSelected","ImageDefaultDog","breedSelected","undefined","fontStyle","fontFamily","listColorFonts","listFonts","objectTest","Object","parse","getItem","console","log","getDogApiLIst","bind","handleChangeBreed","handleChangeFontFamily","handleChangeFontColor","handleChangeNameDog","this","dogSelected","url_image","fetch","then","res","json","message","catch","event","getImgDogApi","target","value","dateParams","getDate","slice","getMonth","getFullYear","hoursParams","getHours","getMinutes","formattedDate","formattedHour","options","listFontsSelect","insertionDate","getFormattedDate","getgetFormattedHours","map","data","push","forEach","element","className","onClick","Alert","isOpen","Container","style","src","alt","onSubmit","Row","onChange","required","placeholder","type","Component","App","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b0a8dd9b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/defaultDog.319bc19d.jpg\";","import React, { Component } from \"react\";\r\nimport { Alert, Container, Row } from 'reactstrap';\r\nimport \"./DogApi.css\";\r\nimport ImageDefaultDog from \"../../assets/images/defaultDog.jpg\";\r\n\r\nclass DogApi extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      listDogAPI: [],\r\n      nameDog: \"\",\r\n      imgDogSelected: ImageDefaultDog,\r\n      alertOptions: {\r\n        visibleAlert: false,\r\n        text: '',\r\n        color: 'info',\r\n      },\r\n      breedSelected: 'defaultValue',\r\n      dateTime: Date(),\r\n      registered: undefined,\r\n      fontStyle: {\r\n        color: \"defaultValue\",\r\n        fontFamily: \"defaultValue\",\r\n      },\r\n      listColorFonts: ['Blue', 'Red', 'Purple', \"Green\", 'Black'],\r\n      listFonts: ['Acme', 'Anton', 'Josefin Sans', \"Notable\", 'Roboto']\r\n    };\r\n\r\n    // esse for carregara todos o elementos salvos no local storage\r\n    let objectTest = new Object();\r\n    for (const key in this.state) {\r\n      objectTest[key] = JSON.parse(localStorage.getItem(`@challenge-enext/${key}`));\r\n    };\r\n\r\n    //validação para verificar se o existe algum registro no local storage, se existir, seta o state com as informações\r\n    (localStorage.getItem(`@challenge-enext/registered`)) ? this.state = objectTest : console.log('Registro Limpo');\r\n\r\n    //O bind resolve um problema causado pelo contexto do JavaScript, ele provê uma maneira de garantir que mesmo desacoplando \r\n    //uma função de um objeto o comportamento dele continue o mesmo, garantindo assim uma integridade do comportamento da função. \r\n    this.getDogApiLIst = this.getDogApiLIst.bind(this);\r\n    this.handleChangeBreed = this.handleChangeBreed.bind(this);\r\n    this.handleChangeFontFamily = this.handleChangeFontFamily.bind(this);\r\n    this.handleChangeFontColor = this.handleChangeFontColor.bind(this);\r\n    this.handleChangeNameDog = this.handleChangeNameDog.bind(this);\r\n  }\r\n\r\n  //É invocado imediatamente após um componente ser montado\r\n  componentDidMount() {\r\n    this.getDogApiLIst();//chama a funcao para carregar o select com as raças\r\n  }\r\n\r\n  //Recebe a a imagem randomica da raça do cachorro selecionado\r\n  getImgDogApi(dogSelected) {\r\n    if (dogSelected) {\r\n\r\n      let url_image = `https://dog.ceo/api/breed/${dogSelected}/images/random`;\r\n      fetch(url_image).then(res => { return res.json(); })\r\n        .then(json => {\r\n          this.setState({ imgDogSelected: json.message }); //seta a image retornada no state\r\n        }).catch(error => { this.onShowAlert('danger', `Erro: ${error}`); });\r\n    }\r\n  }\r\n\r\n  //Recebe a lista de raças da api\r\n  getDogApiLIst() {\r\n    let url_coversor = `https://dog.ceo/api/breeds/list/all`;\r\n    fetch(url_coversor).then(res => { return res.json(); })\r\n      .then(json => {\r\n        let listDogAPI = [json.message];\r\n        this.setState({ listDogAPI });\r\n      }).catch(error => { this.onShowAlert('danger', `Erro: ${error}`); });\r\n  }\r\n\r\n  //Seta no state a raça selecionada\r\n  handleChangeBreed(event) {\r\n    this.getImgDogApi(event.target.value);\r\n    this.setState({ breedSelected: event.target.value })\r\n  }\r\n\r\n  //Seta no state a fontFamily selecionada\r\n  handleChangeFontFamily(event) {\r\n    this.setState({ fontStyle: { fontFamily: event.target.value, color: this.state.fontStyle.color } })\r\n  }\r\n\r\n  //Seta no state a cor da font selecionada\r\n  handleChangeFontColor(event) {\r\n    this.setState({ fontStyle: { fontFamily: this.state.fontStyle.fontFamily, color: event.target.value } })\r\n  }\r\n\r\n  //Seta no state a cor da font selecionada\r\n  handleChangeNameDog(event) {\r\n    this.setState({ nameDog: event.target.value })\r\n  }\r\n\r\n  //salva as informacoes no local storage\r\n  handleSubmit = (e) => {\r\n\r\n    e.preventDefault();// Prevent submit from reloading the page\r\n\r\n    try {\r\n      //salvando a data/hora do insercao no local storage.. OBS: passando o callback para garantir que o setState seja realiza primeiro.\r\n      this.setState({ dateTime: new Date(), registered: true, nameDog: this.state.nameDog }, () => {\r\n        for (const key in this.state) {\r\n          localStorage.setItem(`@challenge-enext/${key}`, JSON.stringify(this.state[key]));\r\n        }\r\n        this.onShowAlert('success', 'Registrado com sucesso!');\r\n      });\r\n    } catch (error) { this.onShowAlert('danger', `Erro: ${error}`) };\r\n  }\r\n\r\n  //Mostrta o alert de sucesso durante 2seg, depois seta aos valores default\r\n  onShowAlert = (color, text) => {\r\n    this.setState({ alertOptions: { visibleAlert: true, text, color } }, () => {\r\n      window.setTimeout(() => {\r\n        this.setState({ alertOptions: { visibleAlert: false, text: '', color: 'info' } })\r\n      }, 2000)\r\n    });\r\n  }\r\n\r\n  //pega a data atual para adiciona na insercao do usuario\r\n  getFormattedDate(dateParams) {\r\n    let day = (\"00\" + dateParams.getDate()).slice(-2);\r\n    let month = (\"00\" + (dateParams.getMonth() + 1)).slice(-2);\r\n    let year = (\"0000\" + dateParams.getFullYear()).slice(-4);\r\n    let date = day + '/' + month + '/' + year;\r\n    return date;\r\n  }\r\n\r\n  //pega a data atual para adiciona na insercao do usuario\r\n  getgetFormattedHours(hoursParams) {\r\n    let hours = (\"00\" + hoursParams.getHours()).slice(-2);\r\n    let minutes = (\"00\" + hoursParams.getMinutes()).slice(-2);\r\n    return hours + ':' + minutes;\r\n  }\r\n\r\n\r\n  //usado para recarregar pagina\r\n  reloadPage = () => { window.location.reload(); }\r\n\r\n  //usado para limpar o localStorage\r\n  deleteLocalStorage = () => { localStorage.clear(); window.location.reload(); }\r\n\r\n  //\r\n  //RENDER REACT\r\n  //\r\n  render() {\r\n    let options = [],\r\n      listFontsSelect = [],\r\n      listColorFonts = [],\r\n      formattedDate,\r\n      formattedHour,\r\n      insertionDate = new Date(this.state.dateTime);\r\n\r\n    formattedDate = this.getFormattedDate(insertionDate);\r\n    formattedHour = this.getgetFormattedHours(insertionDate);\r\n\r\n    //Preenche o select com as racas dos cachorros da API\r\n    this.state.listDogAPI.map(((data) => {\r\n      options.push(<option key='defaultValue' value=''>Selecione uma raça</option>)\r\n      // options.push(<option key='defaultValue' value='defaultValue' disabled>Selecione uma raça</option>)\r\n      for (const key in data) {\r\n        options.push(<option key={key} value={key}>{key}</option>)\r\n      }\r\n      return options;\r\n    }))\r\n\r\n    //Preenche o select com as fonts \r\n    listFontsSelect.push(<option key='defaultValue' value=''>Selecione uma fonte de texto</option>)\r\n    this.state.listFonts.forEach(element => {\r\n      listFontsSelect.push(<option key={element} value={element}>{element}</option>)\r\n    });\r\n\r\n    //Preenche o select com as cores de fonts \r\n    listColorFonts.push(<option key='defaultValue' value=''>Selecione uma cor para o texto</option>)\r\n    this.state.listColorFonts.forEach(element => {\r\n      listColorFonts.push(<option key={element} value={element}>{element}</option>)\r\n    });\r\n\r\n    return (//retorno do \"html\" para apresentar no App.js\r\n\r\n      <div className=\"list-dog-api\" >\r\n        <div className=\"buttons-config\">\r\n          <button className=\"btn btn-secondary ml-1 mt-1 col-12\" onClick={() => { this.reloadPage() }}>Reload Page</button>\r\n          <button className=\"btn btn-secondary ml-1 mt-1 col-12\" onClick={() => { this.deleteLocalStorage() }}>Delete Local Storage</button>\r\n        </div>\r\n\r\n        <Alert className=\"alert\" color={this.state.alertOptions.color} isOpen={this.state.alertOptions.visibleAlert}>\r\n          {this.state.alertOptions.text}\r\n        </Alert>\r\n\r\n        <Container>\r\n\r\n          <div className=\"div-img-label\" >\r\n            {/* AQUI ELE SÓ PERMITE MOSTRAR O ELEMENTO SE ESTIVER REGISTRADO */}\r\n            {this.state.registered ?\r\n              <div className=\"label-name\">\r\n                <label style={this.state.fontStyle} >Nome: {this.state.nameDog}</label>\r\n                <label style={this.state.fontStyle} >Raça: {this.state.breedSelected} </label>\r\n                <label style={this.state.fontStyle} >Hora: {formattedHour} </label>\r\n                <label style={this.state.fontStyle}>Data: {formattedDate} </label>\r\n              </div>\r\n              : null};\r\n            <img className=\"dog-img\" src={this.state.imgDogSelected} alt=\"A cool dog\" />\r\n          </div>\r\n\r\n          <form onSubmit={(e) => { this.handleSubmit(e) }}>\r\n            <Row>\r\n              <select className=\"select-breed custom-select\" value={this.state.breedSelected} onChange={this.handleChangeBreed} required>\r\n                {options}\r\n\r\n              </select>\r\n            </Row>\r\n            <Row>\r\n              <input className=\"input-name-dog form-control\" value={this.state.nameDog} onChange={this.handleChangeNameDog} placeholder=\"Digite o nome do cachorro\" required></input>\r\n            </Row>\r\n            <Row>\r\n              <select className=\"select-font-family custom-select\" value={this.state.fontStyle.fontFamily} onChange={this.handleChangeFontFamily} required>\r\n                {listFontsSelect}\r\n              </select>\r\n            </Row>\r\n            <Row>\r\n              <select className=\"select-font-color custom-select\" value={this.state.fontStyle.color} onChange={this.handleChangeFontColor} required>\r\n                {listColorFonts}\r\n              </select>\r\n            </Row>\r\n            <Row>\r\n              <button type=\"submit\" className=\"button-save btn btn-info\">Salvar</button>\r\n            </Row>\r\n          </form>\r\n        </Container>\r\n      </div >\r\n    );\r\n  }\r\n}\r\n\r\nexport default DogApi;\r\n\r\n","import React from 'react';\r\nimport './App.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport DogApi from \"../dogApi/DogApi\"\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <DogApi />\r\n      </header>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/app/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}